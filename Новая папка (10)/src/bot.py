import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from database import Database
from ocr_handler import OCRHandler
import os

# Set console encoding to UTF-8
if sys.platform.startswith('win'):
    sys.stdout.reconfigure(encoding='utf-8')
    sys.stderr.reconfigure(encoding='utf-8')

# –õ–æ–≥–≥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è—Å—ã
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–Ω—ã —Ç—ñ–∫–µ–ª–µ–π –æ—Ä–Ω–∞—Ç—É
os.environ['BOT_TOKEN'] = '7711781091:AAHAO6a3CnbH8LfZ3HIOD0DyxhHvZKniPXA'
os.environ['CHANNEL_ID'] = '-1002273910123'

# –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è—Å—ã
print("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è—Å—ã...")
bot = Bot(token=os.environ['BOT_TOKEN'])
dp = Dispatcher()
db = Database('database/users.db')
ocr = OCRHandler()
CHANNEL_ID = int(os.environ['CHANNEL_ID'])
print("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è—Å—ã —Å”ô—Ç—Ç—ñ –∞—è“õ—Ç–∞–ª–¥—ã")

# –ê—Ä–Ω–∞“ì–∞ —à–∞“õ—ã—Ä—É —Å—ñ–ª—Ç–µ–º–µ—Å—ñ–Ω –∂–∞—Å–∞—É
async def create_invite_link(user_id: int) -> str:
    try:
        # –ñ–∞“£–∞ —à–∞“õ—ã—Ä—É —Å—ñ–ª—Ç–µ–º–µ—Å—ñ–Ω –∂–∞—Å–∞—É
        invite_link = await bot.create_chat_invite_link(
            chat_id=CHANNEL_ID,
            member_limit=1,
            expire_date=0  # –ú”ô“£–≥—ñ–ª—ñ–∫ —Å—ñ–ª—Ç–µ–º–µ
        )
        return invite_link.invite_link
    except Exception as e:
        logger.error(f"–®–∞“õ—ã—Ä—É —Å—ñ–ª—Ç–µ–º–µ—Å—ñ–Ω –∂–∞—Å–∞—É “õ–∞—Ç–µ—Å—ñ: {e}")
        return None

# –ê—Ä–Ω–∞–¥–∞–Ω —à—ã“ì–∞—Ä—É
async def remove_from_channel(user_id: int):
    try:
        # –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã –∞—Ä–Ω–∞–¥–∞–Ω —à—ã“ì–∞—Ä—É
        await bot.ban_chat_member(
            chat_id=CHANNEL_ID,
            user_id=user_id
        )
        # –ë“±“ì–∞—Ç—Ç–∞—É–¥—ã –∞–ª—ã–ø —Ç–∞—Å—Ç–∞—É (–ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã “õ–∞–π—Ç–∞ “õ–æ—Å—ã–ª–∞ –∞–ª–∞–¥—ã)
        await bot.unban_chat_member(
            chat_id=CHANNEL_ID,
            user_id=user_id
        )
        return True
    except Exception as e:
        logger.error(f"–ê—Ä–Ω–∞–¥–∞–Ω —à—ã“ì–∞—Ä—É “õ–∞—Ç–µ—Å—ñ: {e}")
        return False

# –ú–µ—Ä–∑—ñ–º—ñ –±—ñ—Ç–∫–µ–Ω –∂–∞–∑—ã–ª—ã–º–¥–∞—Ä–¥—ã —Ç–µ–∫—Å–µ—Ä—É
async def check_expired_subscriptions():
    while True:
        try:
            # –ú–µ—Ä–∑—ñ–º—ñ –±—ñ—Ç–∫–µ–Ω –∂–∞–∑—ã–ª—ã–º–¥–∞—Ä–¥—ã –∞–ª—É
            expired = db.get_expired_subscriptions()
            
            for user_id, invite_link in expired:
                # –ñ–∞–∑—ã–ª—ã–º–¥—ã ”©—à—ñ—Ä—É
                db.deactivate_subscription(user_id)
                
                # –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã –∞—Ä–Ω–∞–¥–∞–Ω —à—ã“ì–∞—Ä—É
                await remove_from_channel(user_id)
                
                # –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É
                try:
                    await bot.send_message(
                        user_id,
                        "–°—ñ–∑–¥—ñ“£ –∂–∞–∑—ã–ª—ã–º –º–µ—Ä–∑—ñ–º—ñ“£—ñ–∑ –∞—è“õ—Ç–∞–ª–¥—ã. –ñ–∞–∑—ã–ª—ã–º–¥—ã –∂–∞“£–∞—Ä—Ç—É “Ø—à—ñ–Ω /start –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑."
                    )
                except:
                    pass
                
        except Exception as e:
            logger.error(f"–ú–µ—Ä–∑—ñ–º—ñ –±—ñ—Ç–∫–µ–Ω –∂–∞–∑—ã–ª—ã–º–¥–∞—Ä–¥—ã —Ç–µ–∫—Å–µ—Ä—É “õ–∞—Ç–µ—Å—ñ: {e}")
        
        # ”ò—Ä 1 —Å–∞“ì–∞—Ç —Å–∞–π—ã–Ω —Ç–µ–∫—Å–µ—Ä—É
        await asyncio.sleep(3600)

# –ë–∞—Ç—ã—Ä–º–∞–ª–∞—Ä
def get_tariff_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1 –∞–π ‚Äì 350‚Ç∏", callback_data="tariff:one_month")],
        [InlineKeyboardButton(text="–®–µ–∫—Å—ñ–∑ ‚Äì 3500‚Ç∏", callback_data="tariff:unlimited")],
    ])
    return keyboard

def get_payment_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="back_to_tariffs")]
    ])
    return keyboard

# –°—Ç–∞—Ä—Ç –∫–æ–º–∞–Ω–¥–∞—Å—ã
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    try:
        db.add_user(message.from_user.id, message.from_user.username)
        
        await message.answer(
            "üé¨ –°”ô–ª–µ–º–µ—Ç—Å—ñ–∑! Jaryq Dybys –∞—Ä–Ω–∞—Å—ã–Ω–∞ “õ–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑!\n\n"
            "–ë“±–ª –±–æ—Ç ‚Äì Jaryq Dybys –∞—Ä–Ω–∞—Å—ã–Ω–∞ –∂–∞–∑—ã–ª—É–¥—ã –±–∞—Å“õ–∞—Ä—É“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω —Ä–µ—Å–º–∏ Telegram-–±–æ—Ç.\n\n"
            "üéØ Jaryq Dybys ‚Äì –∂–∞–ø–æ–Ω –∞–Ω–∏–º–µ–ª–µ—Ä—ñ–Ω “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–µ –¥—ã–±—ã—Å—Ç–∞–π—Ç—ã–Ω –µ—Ä—ñ–∫—Ç—ñ —Ç–æ–ø.\n"
            "–ê—Ä–Ω–∞–¥–∞ —Å—ñ–∑ —Ç–∞–±–∞ –∞–ª–∞—Å—ã–∑:\n"
            "- –¢–∞–Ω—ã–º–∞–ª –∞–Ω–∏–º–µ–ª–µ—Ä–¥—ñ“£ “õ–∞–∑–∞“õ—à–∞ –¥—É–±–ª—è–∂—ã\n"
            "- –≠–∫—Å–∫–ª—é–∑–∏–≤—Ç—ñ –∞—É–¥–∞—Ä–º–∞–ª–∞—Ä\n"
            "- –ñ–∞“£–∞ —à—ã“õ“õ–∞–Ω –∞–Ω–∏–º–µ–ª–µ—Ä–¥—ñ“£ –∞—É–¥–∞—Ä–º–∞—Å—ã\n\n"
            "–ñ–∞–∑—ã–ª—ã–º —Ç“Ø—Ä—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
            reply_markup=get_tariff_keyboard()
        )
    except Exception as e:
        print(f"–°—Ç–∞—Ä—Ç –∫–æ–º–∞–Ω–¥–∞—Å—ã “õ–∞—Ç–µ—Å—ñ: {e}")
        logger.error(f"–°—Ç–∞—Ä—Ç –∫–æ–º–∞–Ω–¥–∞—Å—ã “õ–∞—Ç–µ—Å—ñ: {e}")
        await message.answer("“ö–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω /start –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.")

# –¢–∞—Ä–∏—Ñ —Ç–∞“£–¥–∞—É
@dp.callback_query(lambda c: c.data.startswith('tariff:'))
async def process_tariff_selection(callback_query: CallbackQuery):
    try:
        tariff = callback_query.data.split(':')[1]
        
        if tariff == "one_month":
            message_text = (
                "–°—ñ–∑ 1 –∞–π–ª—ã“õ —Ç–∞—Ä–∏—Ñ—ñ–Ω —Ç–∞“£–¥–∞–¥—ã“£—ã–∑.\n\n"
                "üé¨ –ë“±–ª —Ç–∞—Ä–∏—Ñ–∫–µ –∫—ñ—Ä–µ–¥—ñ:\n"
                "- 1 –∞–π –±–æ–π—ã –∞—Ä–Ω–∞“ì–∞ —Ç–æ–ª—ã“õ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫\n"
                "- –ë–∞—Ä–ª—ã“õ –¥—É–±–ª—è–∂–¥–∞—Ä–¥—ã –∫”©—Ä—É –º“Ø–º–∫—ñ–Ω–¥—ñ–≥—ñ\n"
                "- –ñ–∞“£–∞ –∞—É–¥–∞—Ä–º–∞–ª–∞—Ä —à—ã“õ“õ–∞–Ω –∫–µ–∑–¥–µ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É\n\n"
                "üí≥ –¢”©–ª–µ–º –∂–∞—Å–∞—É “Ø—à—ñ–Ω:\n"
                "Kaspi Gold: 4400 4302 2052 7011\n"
                "–ê–ª—É—à—ã: –ù“±—Ä—Å“±–ª—Ç–∞–Ω –°\n"
                "–°–æ–º–∞: 350‚Ç∏\n\n"
                "üìù –¢”©–ª–µ–º –∂–∞—Å–∞“ì–∞–Ω–Ω–∞–Ω –∫–µ–π—ñ–Ω —á–µ–∫—Ç—ñ PDF —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞ –Ω–µ–º–µ—Å–µ —Å—É—Ä–µ—Ç —Ç“Ø—Ä—ñ–Ω–¥–µ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑."
            )
        elif tariff == "unlimited":
            message_text = (
                "–°—ñ–∑ –®–ï–ö–°–Ü–ó —Ç–∞—Ä–∏—Ñ—ñ–Ω —Ç–∞“£–¥–∞–¥—ã“£—ã–∑.\n\n"
                "üé¨ –ë“±–ª —Ç–∞—Ä–∏—Ñ–∫–µ –∫—ñ—Ä–µ–¥—ñ:\n"
                "- –®–µ–∫—Å—ñ–∑ –º–µ—Ä–∑—ñ–º–≥–µ –∞—Ä–Ω–∞“ì–∞ —Ç–æ–ª—ã“õ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫\n"
                "- –ë–∞—Ä–ª—ã“õ –¥—É–±–ª—è–∂–¥–∞—Ä–¥—ã –∫”©—Ä—É –º“Ø–º–∫—ñ–Ω–¥—ñ–≥—ñ\n"
                "- –ñ–∞“£–∞ –∞—É–¥–∞—Ä–º–∞–ª–∞—Ä —à—ã“õ“õ–∞–Ω –∫–µ–∑–¥–µ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É\n"
                "- VIP “õ–æ–ª–¥–∞—É\n"
                "- –ñ–∞“£–∞ –∞–Ω–∏–º–µ –∞—É–¥–∞—Ä–º–∞ —Å“±—Ä–∞–Ω—ã—Å—Ç–∞—Ä—ã–Ω –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω–¥—ñ–≥—ñ\n\n"
                "üí≥ –¢”©–ª–µ–º –∂–∞—Å–∞—É “Ø—à—ñ–Ω:\n"
                "Kaspi Gold: 4400 4302 2052 7011\n"
                "–ê–ª—É—à—ã: –ù“±—Ä—Å“±–ª—Ç–∞–Ω –°\n"
                "–°–æ–º–∞: 3500‚Ç∏\n\n"
                "üìù –¢”©–ª–µ–º –∂–∞—Å–∞“ì–∞–Ω–Ω–∞–Ω –∫–µ–π—ñ–Ω —á–µ–∫—Ç—ñ PDF —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞ –Ω–µ–º–µ—Å–µ —Å—É—Ä–µ—Ç —Ç“Ø—Ä—ñ–Ω–¥–µ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑."
            )
        else:
            await bot.answer_callback_query(callback_query.id, text="“ö–∞—Ç–µ —Ç–∞—Ä–∏—Ñ —Ç–∞“£–¥–∞–ª–¥—ã")
            return
        
        await bot.edit_message_text(
            message_text,
            callback_query.message.chat.id,
            callback_query.message.message_id,
            reply_markup=get_payment_keyboard()
        )
    except Exception as e:
        print(f"–¢–∞—Ä–∏—Ñ —Ç–∞“£–¥–∞—É “õ–∞—Ç–µ—Å—ñ: {e}")
        logger.error(f"–¢–∞—Ä–∏—Ñ —Ç–∞“£–¥–∞—É “õ–∞—Ç–µ—Å—ñ: {e}")
        await bot.send_message(callback_query.message.chat.id, "“ö–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω /start –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.")

# –ê—Ä—Ç“õ–∞ “õ–∞–π—Ç—É
@dp.callback_query(lambda c: c.data == "back_to_tariffs")
async def process_back_to_tariffs(callback_query: CallbackQuery):
    try:
        await bot.edit_message_text(
            "–ñ–∞–∑—ã–ª—ã–º —Ç“Ø—Ä—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
            callback_query.message.chat.id,
            callback_query.message.message_id,
            reply_markup=get_tariff_keyboard()
        )
    except Exception as e:
        print(f"–ê—Ä—Ç“õ–∞ “õ–∞–π—Ç—É “õ–∞—Ç–µ—Å—ñ: {e}")
        logger.error(f"–ê—Ä—Ç“õ–∞ “õ–∞–π—Ç—É “õ–∞—Ç–µ—Å—ñ: {e}")

# –ß–µ–∫—Ç—ñ ”©“£–¥–µ—É
@dp.message(lambda message: message.content_type in [types.ContentType.PHOTO, types.ContentType.DOCUMENT])
async def process_check(message: types.Message):
    try:
        # –§–∞–π–ª–¥—ã –∂“Ø–∫—Ç–µ—É
        file_path = None
        if message.content_type == types.ContentType.PHOTO:
            # –§–æ—Ç–æ–Ω—ã –∂“Ø–∫—Ç–µ—É
            photo = message.photo[-1]
            file = await bot.get_file(photo.file_id)
            file_path = file.file_path
            
            # –§–∞–π–ª–¥—ã –∂“Ø–∫—Ç–µ—É
            downloaded_file = await bot.download_file(file_path)
            
        elif message.content_type == types.ContentType.DOCUMENT:
            # “ö“±–∂–∞—Ç—Ç—ã —Ç–µ–∫—Å–µ—Ä—É (PDF)
            if not message.document.mime_type == "application/pdf":
                await message.answer("–¢–µ–∫ PDF —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞“ì—ã —Ñ–∞–π–ª–¥–∞—Ä “õ–∞–±—ã–ª–¥–∞–Ω–∞–¥—ã.")
                return
                
            # –§–∞–π–ª–¥—ã –∂“Ø–∫—Ç–µ—É
            file = await bot.get_file(message.document.file_id)
            file_path = file.file_path
            downloaded_file = await bot.download_file(file_path)
        
        # OCR ”©“£–¥–µ—É
        result = await ocr.process_file(downloaded_file, file_path)
        
        # –ß–µ–∫—Ç—ñ —Ç–µ–∫—Å–µ—Ä—É
        is_valid, status = ocr.validate_check(result)
        
        if is_valid:
            # –¢”©–ª–µ–º–¥—ñ ”©“£–¥–µ—É
            await process_payment(message, 350 if status == "one_month" else 3500, message.from_user.id)
        else:
            await message.answer(
                f"–ß–µ–∫ —Ä–∞—Å—Ç–∞–ª–º–∞–¥—ã: {status}\n"
                "“ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑ –Ω–µ–º–µ—Å–µ ”ô–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.",
                reply_markup=get_payment_keyboard()
            )
            
    except Exception as e:
        print(f"–ß–µ–∫—Ç—ñ ”©“£–¥–µ—É “õ–∞—Ç–µ—Å—ñ: {e}")
        logger.error(f"–ß–µ–∫—Ç—ñ ”©“£–¥–µ—É “õ–∞—Ç–µ—Å—ñ: {e}")
        await message.answer("–ß–µ–∫—Ç—ñ ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑.")

async def main():
    print("–ë–æ—Ç –±–∞—Å—Ç–∞–ª—É–¥–∞...")
    
    # –ú–µ—Ä–∑—ñ–º—ñ –±—ñ—Ç–∫–µ–Ω –∂–∞–∑—ã–ª—ã–º–¥–∞—Ä–¥—ã —Ç–µ–∫—Å–µ—Ä—É —Ç–∞–ø—Å—ã—Ä–º–∞—Å—ã–Ω “õ–æ—Å—É
    asyncio.create_task(check_expired_subscriptions())
    
    print("–ë–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª—É–¥–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())